<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Kubernetes</title>
    <link>http://example.org/</link>
    <description>Recent content on Introduction to Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Dec 2018 17:00:31 -0500</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beginning</title>
      <link>http://example.org/containers/history/history/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>http://example.org/containers/history/history/</guid>
      <description> In the beginning </description>
    </item>
    
    <item>
      <title>Hypervisor</title>
      <link>http://example.org/containers/history/hyper/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>http://example.org/containers/history/hyper/</guid>
      <description> The Hypervisor </description>
    </item>
    
    <item>
      <title>Containers</title>
      <link>http://example.org/containers/history/containers/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>http://example.org/containers/history/containers/</guid>
      <description> Containers </description>
    </item>
    
    <item>
      <title>Layers</title>
      <link>http://example.org/containers/history/layers/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>http://example.org/containers/history/layers/</guid>
      <description> Containers Layers </description>
    </item>
    
    <item>
      <title>Graduated Projects</title>
      <link>http://example.org/kubernetes/community/projects_grad/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/community/projects_grad/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Incubating Projects</title>
      <link>http://example.org/kubernetes/community/projects_inc/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/community/projects_inc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Involvement</title>
      <link>http://example.org/kubernetes/community/involvement/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/community/involvement/</guid>
      <description> Sigs https://github.com/kubernetes/community/blob/master/sig-list.md
 Stackoverflow https://stackoverflow.com/questions/tagged/kubernetes
 Slack
 k8 http://slack.k8s.io/ CNCF https://slack.cncf.io/   </description>
    </item>
    
    <item>
      <title>Master</title>
      <link>http://example.org/kubernetes/arch/master/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/arch/master/</guid>
      <description> API data store: Etcd (Cluster State)
 Controller Managers :
 Node Controller Deployment Controller ReplicaSet Controller Replication Controller Endpoints Controller Service Account &amp;amp; Token Controller   Scheduler: Bind pod to Node
  </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>http://example.org/kubernetes/arch/node/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/arch/node/</guid>
      <description> Kubelet:
 cAdvisor (metrics, logs&amp;hellip;)  Container Runtime:
 docker containerd  Pod:
 Container (one or more)  Kube-proxy:
 Used to reach services and allow communication between Nodes.   </description>
    </item>
    
    <item>
      <title>Data Flow</title>
      <link>http://example.org/kubernetes/arch/data/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/arch/data/</guid>
      <description>Data Flow  CNI: Network Plugin in Kubelet that allows to talk to networking to get IPs for Pods and Services.
 gRPC: API to communicate API Server to ETCD, Controller Manager and Scheduler
 Kubelet - all K8s nodes have a kubelet that ensures that any pod assigned to it are running and configured in the desired state.
 CRI(Container Runtime Interface) gRPC API compiled in kubelet which allows to kubelet to talk to container runtimes by using gRPC API.</description>
    </item>
    
    <item>
      <title>Benefits of Docker</title>
      <link>http://example.org/containers/docker/benefits/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>http://example.org/containers/docker/benefits/</guid>
      <description> Docker Benefits  Separation of concerns Developers focus on building their apps System admins focus on deployment Fast development cycle Application portability Build in one environment, ship to another Scalability Easily spin up new containers if needed Run more apps on one host machine  </description>
    </item>
    
    <item>
      <title>Platform</title>
      <link>http://example.org/containers/docker/platform/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>http://example.org/containers/docker/platform/</guid>
      <description> Docker </description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>http://example.org/containers/docker/dockerfile/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>http://example.org/containers/docker/dockerfile/</guid>
      <description>Docker Dockerfile  Instructions specify what to do when building the image FROM instruction specifies what the base image should be RUN instruction specifies a command to execute Comments start with “#” Remember, each line in a Dockerfile creates a new layer if it changes the state of the image You need to find the right balance between having lots of layers created for the image and readability of the Dockerfile Don’t install unnecessary packages One ENTRYPOINT per Dockerfile Combine similar commands into one by using “&amp;amp;&amp;amp;” and “\”</description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>http://example.org/containers/docker/cli/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>http://example.org/containers/docker/cli/</guid>
      <description>Docker Docker cli  docker ps docker images docker logs docker exec  Official Documentation
More exercises</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/namespaces/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/namespaces/exercises/</guid>
      <description>  Kubernetes yaml files   createNamespace.yaml  (0 ko)    Update createNamespace.yaml with your namespace
Create your namespace
kubectl create -f ./createNamespace.yaml  Verify your namespace exists
$ kubectl get namespaces NAME STATUS AGE default Active 1d kube-system Active 1d kube-public Active 1d YOUR_NAME_SPACE Active 1d  Set your namespace to the default
kubectl config set-context $(kubectl config current-context) --namespace=&amp;lt;insert-namespace-name-here&amp;gt;  Validate it
kubectl config view | grep namespace:  </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/pods/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/pods/exercises/</guid>
      <description>Start a pod from a manifest   Kubernetes yaml files   multi-pod.yaml  (0 ko)   single-pod-nginx.yaml  (0 ko)    kubectl apply -f single-pod-nginx.yaml  Verify the state of the pod kubectl get pods NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 44s  Get more details of the pod kubectl describe pod nginx  Accessing your pod kubectl port-forward nginx 8080:80  Logs kubectl logs -f nginx  Navigate to http://localhost:8080 in your web browser</description>
    </item>
    
    <item>
      <title>Labels and Selectors</title>
      <link>http://example.org/kubernetes/objects/pods/labels_selectors/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/pods/labels_selectors/</guid>
      <description>Labels Labels are key/value pairs that are attached to objects, such as pods that help to identify that object.
Selectors Label Selectors help client/user identify a set of objects.
spec: selector: matchLabels: app: mysql strategy: type: Recreate template: metadata: labels: app: mysql  Demo Create labels &amp;amp; use selector to identify set of objects</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/resourcequotas/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/resourcequotas/exercises/</guid>
      <description>Kubernetes yaml files   pod-limits.yaml  (0 ko)   pod-no-quotas.yaml  (0 ko)   pod-only-limit.yaml  (0 ko)   pod-only-request.yaml  (0 ko)   quotas.yaml  (0 ko)    Deploy default resources quotas for your namespace
kubectl create -f quotas.yaml kubectl describe quota  Verify qoutas
kubectl get resourcequota mem-cpu-rq --output=yaml  Deploy specific limits and requests for pods
kubectl create -f pod-limits.</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/controllers/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/controllers/exercises/</guid>
      <description>In these exercises we will be working with these controllers, later we will working with Endpoints, since they are directly related to Services.
  Kubernetes yaml files   deploy-nginx-1.9.1-scale.yaml  (0 ko)   deploy-nginx-1.9.1.yaml  (0 ko)   deploy-nginx.yaml  (0 ko)   replicaset.yaml  (0 ko)    Deployment Controller - Responsible for the controlled deployment of pods and ReplicaSets.
ReplicaSets - is the newest version of the Replication Controller.</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/storage/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/storage/exercises/</guid>
      <description>   Kubernetes yaml files   mysql-pod.yaml  (0 ko)   mysql-pv.yaml  (0 ko)    Create the persistent and the claim
kubectl apply -f mysql-pv.yaml  Create a pod that will use it.
kubectl apply -f mysql-pod.yaml  Clean up kubectl delete -f mysql-pv.yaml kubectl delete -f mysql-pod.yaml  </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/services/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/services/exercises/</guid>
      <description>Kubernetes yaml files   app.yaml  (1 ko)   mysql-all.yaml  (1 ko)   mysql-service.yaml  (0 ko)    Pod Deployment with health checks, PersistentVolume and claim Since we have created the mysql pod several times, here is a yaml file that creates it all.
Create a secret for the password between Wordpress and MYSQL kubectl create secret generic mysql-pass --from-literal=password=YOUR_PASSWORD  Verify it is there</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>http://example.org/kubernetes/objects/healthchecks/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/healthchecks/exercises/</guid>
      <description>Exercises   Kubernetes yaml files   mysql-config.yaml  (0 ko)   mysql-health.yaml  (1 ko)   mysql-pv.yaml  (0 ko)    If you deleted the PV from the previous exercise please recreate it
kubectl apply -f mysql-pv.yaml  Mysql conf needed for testing
kubectl create -f mysql-config.yaml  Start the Mysql deployment
kubectl apply -f mysql-health.yaml  Get the pod name
POD_NAME=$(kubectl get pods -l app=mysql -o=jsonpath=&#39;{.</description>
    </item>
    
    <item>
      <title>Configmaps</title>
      <link>http://example.org/kubernetes/objects/configmaps/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/configmaps/</guid>
      <description> Configmaps </description>
    </item>
    
    <item>
      <title>Daemonsets</title>
      <link>http://example.org/kubernetes/objects/daemonsets/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/daemonsets/</guid>
      <description> Daemonsets </description>
    </item>
    
    <item>
      <title>ingress</title>
      <link>http://example.org/kubernetes/objects/ingress/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/ingress/</guid>
      <description> Ingress </description>
    </item>
    
    <item>
      <title>Secrets</title>
      <link>http://example.org/kubernetes/objects/secrets/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/objects/secrets/</guid>
      <description> Secrets </description>
    </item>
    
    <item>
      <title>Docker Network options</title>
      <link>http://example.org/containers/network/dockernetop/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>http://example.org/containers/network/dockernetop/</guid>
      <description>Docker Networking options    Flag value Description     -p 8080:80 Map TCP port 80 in the container to port 8080 on the Docker host.   -p 192.168.1.100:8080:80 Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.   -p 8080:80/udp Map UDP port 80 in the container to port 8080 on the Docker host.</description>
    </item>
    
    <item>
      <title>Docker0 </title>
      <link>http://example.org/containers/network/docker0/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>http://example.org/containers/network/docker0/</guid>
      <description> Container Networking  When Docker starts, it creates a virtual interface called docker0 on the host machine docker0 is assigned a random IP address and subnet from the private range defined by RFC 1918 It passes or switches packets between two connected devices just like a physical bridge or switch  Host to container Container to container  Each new container gets one interface that is automatically attached to the docker0 bridge  </description>
    </item>
    
    <item>
      <title>Docker0 Diagram</title>
      <link>http://example.org/containers/network/docker0-dig/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>http://example.org/containers/network/docker0-dig/</guid>
      <description> Container Networking </description>
    </item>
    
    <item>
      <title>Layers</title>
      <link>http://example.org/containers/storage/layers/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>http://example.org/containers/storage/layers/</guid>
      <description> Layers  An image is a collection of files and some meta data Images are comprised of multiple layers A layer is also just another image Each image contains software you want to run Every image contains a base layer Docker uses a copy on write system Layers are read only  </description>
    </item>
    
    <item>
      <title>Volumes</title>
      <link>http://example.org/containers/storage/volumes/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>http://example.org/containers/storage/volumes/</guid>
      <description> Volumes A Volume is a designated directory in a container, which is designed to persist data, independent of the container’s life cycle
 Volume changes are excluded when updating an image Persist when a container is deleted Can be mapped to a host folder Can be shared between containers  </description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>http://example.org/containers/storage/benefits/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>http://example.org/containers/storage/benefits/</guid>
      <description> Benefits of Volumes  De-couple the data that is stored, from the container which created the data Good for sharing data between containers Can setup a data containers which has a volume you mount in other containers Share directories between multiple containers Bypassing the copy on write system to achieve native disk I/O performance Share a host directory with a container Share a single file between the host and container  </description>
    </item>
    
    <item>
      <title>Volume CLI</title>
      <link>http://example.org/containers/storage/commands/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>http://example.org/containers/storage/commands/</guid>
      <description> Docker Volume command The docker volume command contains a number of sub commands used to create and manage volumes Commands are
 docker volume create docker volume ls docker volume inspect docker volume rm  </description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>http://example.org/kubernetes/extras/monitoring/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/extras/monitoring/</guid>
      <description> Monitoring </description>
    </item>
    
    <item>
      <title>Security</title>
      <link>http://example.org/kubernetes/extras/security/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:49 -0500</pubDate>
      
      <guid>http://example.org/kubernetes/extras/security/</guid>
      <description>Security Container security primitives SElinux AppArmor Seccomp https://docs.docker.com/engine/security/seccomp/#run-without-the-default-seccomp-profile
Container Pipeline  Establish a pipeline to build a standard image Have a versioning policy Allow to only run images based of the standard image Use the same OS as the host Keep the image small Use a private registry Don’t embed secrets into images, use Hashicorp Vault https://www.cisecurity.org/benchmark/docker/ https://github.com/docker/docker-bench-security  K8 Security  RBAC NetworkPolicy TLS Image Scanning Aquasec/Twistlock Integrating with HashiCorp Vault other public cloud secret stores Investigate using a container based OS (CoreOS, Atomic Linux) Harden and tweak Make sure to pass https://github.</description>
    </item>
    
  </channel>
</rss>