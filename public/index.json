[
{
	"uri": "http://example.org/",
	"title": "Introduction to Kubernetes",
	"tags": [],
	"description": "",
	"content": " Introduction to Kubernetes Introduction to Kubernetes is a hands-on, interactive workshop giving attendees a thorough understanding of the fundamentals of Kubernetes. As part of this workshop, you will learn how Kubernetes works, be able to successfully create a kubernetes cluster, deploy microservices to that cluster \u0026amp; also hear about some war stories.\n"
},
{
	"uri": "http://example.org/introduction/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Agenda  Introduction\n Who are you? Agenda Contino Instructors Requirements   Containers\n Intro History Primitives Docker Network Storage  Kubernetes\n History\n Community\n CNCF Sig  Connect to Cluster\n Kubernetes Objects\n Namespaces Pods Resource Quotas Controllers Storage Service Healthchecks Cleanup  Options for Running Kubernetes\n Extras\n Monitoring Security  Closing\n  "
},
{
	"uri": "http://example.org/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Who are you? Agenda Contino Instructors Requirements  "
},
{
	"uri": "http://example.org/introduction/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Who are you Please Introduce Yourself\u000b Name Role \u0026amp; Company\u000b \u000bWhat would you like to learn?  "
},
{
	"uri": "http://example.org/containers/",
	"title": "Containers",
	"tags": [],
	"description": "",
	"content": " History\n Primitives\n Docker Intro\n Docker\n Network\n Storage\n  "
},
{
	"uri": "http://example.org/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": " History Community  CNCF Graduated Projects CNCF Incubating Projects\n Get Involved  Connect to Cluster Kubernetes Objects  Namespaces Pods Resource Quotas Controllers Storage Service Healthchecks Cleanup  Options for Running Kubernetes Extras  Monitoring Security   "
},
{
	"uri": "http://example.org/closing/",
	"title": "Closing",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Closing remarks Contact Us:\n|Twitter: @shahadarsh | Twitter: @strongjz | |Email: adarsh.shah@contino.io | Email: james.strong@contino.io |\ncontino.io\n"
},
{
	"uri": "http://example.org/introduction/contino/",
	"title": "Contino",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/introduction/whoami/",
	"title": "Instructors",
	"tags": [],
	"description": "",
	"content": "   Adarsh Shah James Strong         Technical Principal @ Contino Technical Principal @ Contino   Practice Lead (Cloud Native Soft Dev)    Twitter: @shahadarsh Twitter: @strongjz   Website: https://shahadarsh.com https://www.linkedin.com/in/strongjames/    "
},
{
	"uri": "http://example.org/introduction/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " Docker Windows  Directions\n Installer\n  Mac  Directions Installer  gcloud Cloud SDK requires Python 2 with a release version of Python 2.7.9 or later. The installer will install all necessary dependencies, including the needed Python version, by default. If you already have Python 2.x.y installed and want to use the existing installation, you can uncheck the option to install Bundled Python. Note: As of Cloud SDK version 206.0.0, the gcloud CLI has experimental support for running using a Python 3.4+ interpreter (run gcloud topic startup for exclusions and more information on configuring your Python interpreter). All other Cloud SDK tools still require a Python 2.7 interpreter. After installation has completed, accept the following options:\nWindows  Download the Cloud SDK installer. The installer is signed by Google Inc.\n Launch the installer and follow the prompts.\n After installation has completed, accept the following options:\nStart Cloud SDK Shell Run gcloud init\n  Mac  Double Check Python 2 is installed.  python -V   Download one of the following:\nmacOS 64-bit\nmacOS 32-bit\nExtract the contents of the file to any location on your file system.\n Install with this script\n  ./google-cloud-sdk/install.sh   Initialize the install  Open a new terminal so that the changes take effect. Run gcloud init to initialize the SDK:\n./google-cloud-sdk/bin/gcloud init  kubectl You can install kubectl as part of the Google Cloud SDK.\nRun the kubectl installation command:\n gcloud components install kubectl  Test to ensure the version you installed is sufficiently up-to-date:\n kubectl version  "
},
{
	"uri": "http://example.org/containers/history/",
	"title": "History",
	"tags": [],
	"description": "",
	"content": " Container History 1. In the beginning 2. Hypervisors 3. Containers "
},
{
	"uri": "http://example.org/kubernetes/history/",
	"title": "History",
	"tags": [],
	"description": "",
	"content": " Kubernetes History Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.\n“Kubernetes was built to radically change the way that applications are built and deployed in the cloud. Fundamentally, it was designed to give developers more velocity, efficiency, and agility”\nKelsey Hightower, Brendan Burns \u0026amp; Joe Beda -Kubernetes Up and Running Book\n Kubernetes is heavily influenced by Google’s Borg system Released in 2015 when Google partnered with Linux foundation to form CNCF Often called K8s which is a Numeronym K[ubernete]s → K[8]s → K8s Kubernetes - Greek for helmsman or pilot  "
},
{
	"uri": "http://example.org/containers/history/history/",
	"title": "Beginning",
	"tags": [],
	"description": "",
	"content": " In the beginning "
},
{
	"uri": "http://example.org/containers/history/hyper/",
	"title": "Hypervisor",
	"tags": [],
	"description": "",
	"content": " The Hypervisor "
},
{
	"uri": "http://example.org/containers/history/containers/",
	"title": "Containers",
	"tags": [],
	"description": "",
	"content": " Containers "
},
{
	"uri": "http://example.org/containers/history/layers/",
	"title": "Layers",
	"tags": [],
	"description": "",
	"content": " Containers Layers "
},
{
	"uri": "http://example.org/kubernetes/community/",
	"title": "Community",
	"tags": [],
	"description": "",
	"content": " CNCF Landscape "
},
{
	"uri": "http://example.org/kubernetes/community/projects_grad/",
	"title": "Graduated Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/kubernetes/community/projects_inc/",
	"title": "Incubating Projects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/kubernetes/community/involvement/",
	"title": "Involvement",
	"tags": [],
	"description": "",
	"content": " Sigs https://github.com/kubernetes/community/blob/master/sig-list.md\n Stackoverflow https://stackoverflow.com/questions/tagged/kubernetes\n Slack\n k8 http://slack.k8s.io/ CNCF https://slack.cncf.io/   "
},
{
	"uri": "http://example.org/kubernetes/arch/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": " High level Architecture "
},
{
	"uri": "http://example.org/kubernetes/arch/master/",
	"title": "Master",
	"tags": [],
	"description": "",
	"content": " API data store: Etcd (Cluster State)\n Controller Managers :\n Node Controller Deployment Controller ReplicaSet Controller Replication Controller Endpoints Controller Service Account \u0026amp; Token Controller   Scheduler: Bind pod to Node\n  "
},
{
	"uri": "http://example.org/kubernetes/arch/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " Kubelet:\n cAdvisor (metrics, logs\u0026hellip;)  Container Runtime:\n docker containerd  Pod:\n Container (one or more)  Kube-proxy:\n Used to reach services and allow communication between Nodes.   "
},
{
	"uri": "http://example.org/kubernetes/arch/data/",
	"title": "Data Flow",
	"tags": [],
	"description": "",
	"content": " Data Flow  CNI: Network Plugin in Kubelet that allows to talk to networking to get IPs for Pods and Services.\n gRPC: API to communicate API Server to ETCD, Controller Manager and Scheduler\n Kubelet - all K8s nodes have a kubelet that ensures that any pod assigned to it are running and configured in the desired state.\n CRI(Container Runtime Interface) gRPC API compiled in kubelet which allows to kubelet to talk to container runtimes by using gRPC API.\n The Container Runtime provider has to adapt it to CRI API to allow kubelet to talk to them by using OCI Standard (runc) Initially, Kubernetes was built on top of Docker as the container runtime. Soon after, CoreOS announced the rkt container runtime and wanted Kubernetes to support it, as well. So, Kubernetes ended up supporting Docker and rkt, although this model wasn\u0026rsquo;t very scalable in terms of adding new features or support for new container runtimes.\n CRI consists of a protocol buffers and gRPC API, and libraries,\n  "
},
{
	"uri": "http://example.org/containers/primitives/",
	"title": "Primitives",
	"tags": [],
	"description": "",
	"content": " Container Primitives Control Groups Abbreviated cgroups, is a Linux kernel feature that limits, accounts for, and isolates the resource usage\n CPU memory disk I/O network  Namespaces A feature of the Linux kernel that isolate and virtualize system resources of a collection of processes. Examples of resources that can be virtualized include:\n process IDs hostnames user IDs network access interprocess communication filesystems  "
},
{
	"uri": "http://example.org/kubernetes/connect/",
	"title": "Connect",
	"tags": [],
	"description": "",
	"content": " Connecting to your GKE Cluster Prerequisites Follow the Requirements\nGoogle SDK Setup Follow the verification steps\ngcloud auth login  Configure SDK ./gcloud-setup.sh  Retrieve Cluster Credentials (make sure there\u0026rsquo;s no conflict with a pre-existing KUBECONFIG var) gcloud container clusters get-credentials \u0026lt;cluster-name\u0026gt; --region \u0026lt;region\u0026gt;  Confirm Cluster Connectivity kubectl cluster-info  "
},
{
	"uri": "http://example.org/containers/docker/",
	"title": "Docker Intro",
	"tags": [],
	"description": "",
	"content": " Docker Benefits Platform Dockerfile Docker cli "
},
{
	"uri": "http://example.org/kubernetes/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": " Kubernetes API Objects  Namespaces Pods Resource Quotas Controllers Storage Service Healthchecks Secrets ConfigMaps Ingress Cleanup  "
},
{
	"uri": "http://example.org/containers/docker/benefits/",
	"title": "Benefits of Docker",
	"tags": [],
	"description": "",
	"content": " Docker Benefits  Separation of concerns Developers focus on building their apps System admins focus on deployment Fast development cycle Application portability Build in one environment, ship to another Scalability Easily spin up new containers if needed Run more apps on one host machine  "
},
{
	"uri": "http://example.org/containers/docker/platform/",
	"title": "Platform",
	"tags": [],
	"description": "",
	"content": " Docker "
},
{
	"uri": "http://example.org/containers/docker/dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": " Docker Dockerfile  Instructions specify what to do when building the image FROM instruction specifies what the base image should be RUN instruction specifies a command to execute Comments start with “#” Remember, each line in a Dockerfile creates a new layer if it changes the state of the image You need to find the right balance between having lots of layers created for the image and readability of the Dockerfile Don’t install unnecessary packages One ENTRYPOINT per Dockerfile Combine similar commands into one by using “\u0026amp;\u0026amp;” and “\\”\n Use the caching system to your advantage The order of statements is important Add files that are least likely to change first and the ones most likely to change last  "
},
{
	"uri": "http://example.org/containers/docker/cli/",
	"title": "CLI",
	"tags": [],
	"description": "",
	"content": " Docker Docker cli  docker ps docker images docker logs docker exec  Official Documentation\nMore exercises\n"
},
{
	"uri": "http://example.org/kubernetes/objects/namespaces/",
	"title": "Namespaces",
	"tags": [],
	"description": "",
	"content": " Namespaces What Namespaces are virtual clusters inside your Kubernetes cluster that provide logically isolation (kinda) from each other.\nWhy Scope of names Organization of Kubernetes resources\n"
},
{
	"uri": "http://example.org/kubernetes/objects/namespaces/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "  Kubernetes yaml files   createNamespace.yaml  (0 ko)    Update createNamespace.yaml with your namespace\nCreate your namespace\nkubectl create -f ./createNamespace.yaml  Verify your namespace exists\n$ kubectl get namespaces NAME STATUS AGE default Active 1d kube-system Active 1d kube-public Active 1d YOUR_NAME_SPACE Active 1d  Set your namespace to the default\nkubectl config set-context $(kubectl config current-context) --namespace=\u0026lt;insert-namespace-name-here\u0026gt;  Validate it\nkubectl config view | grep namespace:  "
},
{
	"uri": "http://example.org/kubernetes/objects/pods/",
	"title": "Pods",
	"tags": [],
	"description": "",
	"content": " Pods Pods are a collection of containers that share a namespace, are colocated and scheduled together on Kubenetes nodes.\nA pod is a group of one or more containers, with shared storage/network, and a specification for how to run the containers\n"
},
{
	"uri": "http://example.org/kubernetes/objects/pods/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": " Start a pod from a manifest   Kubernetes yaml files   multi-pod.yaml  (0 ko)   single-pod-nginx.yaml  (0 ko)    kubectl apply -f single-pod-nginx.yaml  Verify the state of the pod kubectl get pods NAME READY STATUS RESTARTS AGE nginx 1/1 Running 0 44s  Get more details of the pod kubectl describe pod nginx  Accessing your pod kubectl port-forward nginx 8080:80  Logs kubectl logs -f nginx  Navigate to http://localhost:8080 in your web browser\nMulti container pod Start a pod from a manifest kubectl apply -f multi-pod.yaml  kubectl describe pod multi-pod  Accessing your pod kubectl port-forward multi-pod 8080:80  Navigate to http://localhost:8080/date.log in your web browser\nCleanup kubectl delete -f single-pod-nginx.yaml kubectl delete -f multi-pod.yaml  "
},
{
	"uri": "http://example.org/kubernetes/objects/pods/labels_selectors/",
	"title": "Labels and Selectors",
	"tags": [],
	"description": "",
	"content": " Labels Labels are key/value pairs that are attached to objects, such as pods that help to identify that object.\nSelectors Label Selectors help client/user identify a set of objects.\nspec: selector: matchLabels: app: mysql strategy: type: Recreate template: metadata: labels: app: mysql  Demo Create labels \u0026amp; use selector to identify set of objects\n"
},
{
	"uri": "http://example.org/kubernetes/objects/resourcequotas/",
	"title": "Resource Quotas",
	"tags": [],
	"description": "",
	"content": " What Requests - How much does this pod need to run\nLimits - This pod only gets this much to run\nWhy Kubernetes being a multi-tenant environment, some applications may hog resources and starve others, Resource Qoatas discourage this behavior\nCompute Resources  CPU Memory Storage  requests.storage persistentvolumeclaims storage-class-name.storageclass.storage.k8s.io/requests.storage storage-class-name.storageclass.storage.k8s.io/persistentvolumeclaims  Object Count\n configmaps persistentvolumeclaims pods replicationcontrollers resourcequotas services services.loadbalancers services.nodeports secrets  Priority - low, medium, high\n  More info\n"
},
{
	"uri": "http://example.org/kubernetes/objects/resourcequotas/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "   Kubernetes yaml files   pod-limits.yaml  (0 ko)   pod-no-quotas.yaml  (0 ko)   pod-only-limit.yaml  (0 ko)   pod-only-request.yaml  (0 ko)   quotas.yaml  (0 ko)    Deploy default resources quotas for your namespace\nkubectl create -f quotas.yaml kubectl describe quota  Verify qoutas\nkubectl get resourcequota mem-cpu-rq --output=yaml  Deploy specific limits and requests for pods\nkubectl create -f pod-limits.yaml kubectl describe limits mem-limit-range  Deploy pods with only limits\nkubectl create -f pod-only-limit.yaml Error from server (Forbidden): error when creating \u0026quot;pod-only-limit.yaml\u0026quot;: pods \u0026quot;only-limits\u0026quot; is forbidden: failed quota: mem-cpu-rq: must specify limits.cpu,requests.cpu  Deploy pods with only requests\nkubectl create -f pod-only-request.yaml Error from server (Forbidden): error when creating \u0026quot;pod-only-request.yaml\u0026quot;: pods \u0026quot;only-requests\u0026quot; is forbidden: failed quota: mem-cpu-rq: must specify limits.cpu,requests.cpu  Deploy pod with neither and see defaults applied from the namespace\nkubectl create -f pod-no-quotas.yaml Error from server (Forbidden): error when creating \u0026quot;pod-no-quotas.yaml\u0026quot;: pods \u0026quot;no-quotas\u0026quot; is forbidden: failed quota: mem-cpu-rq: must specify limits.cpu,requests.cpu  Please Delete Quotas! kubectl delete -f quotas.yaml kubectl delete -f pod-limits.yaml  "
},
{
	"uri": "http://example.org/kubernetes/objects/controllers/",
	"title": "Controllers",
	"tags": [],
	"description": "",
	"content": " Controllers In Kubernetes, a controller is a control loop that watches the shared state of the cluster through the apiserver and makes changes attempting to move the current state towards the desired state. There are several in the Kubernetes Architecture that support different functions in the system.\nNamespace controller - Creates and updates the Namespaces in kubernetes\nServiceaccounts controller - Manages the service accounts in the system, which are for processes to interact with Kubernetes.\nNode Controller: Responsible for noticing and responding when nodes go down. Service Account \u0026amp; Token Controllers: Create default accounts and API access tokens for new namespaces.\nReplication Controller - Responsible for maintaining the correct number of pods for every replication controller object in the system. ReplicaSets are the preferred method\nEndpoints Controller - Populates the Endpoints object (that is, joins Services \u0026amp; Pods). When services are created, the Endpoint controller manages the connection between services and the pods back the service.\nDeployments  Scaling Rolling\u000b  ReplicaSet  Desired state  Strategies:  Recreate RollingUpdate (default) Blue/Green Canary A/B Testing  "
},
{
	"uri": "http://example.org/kubernetes/objects/controllers/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": " In these exercises we will be working with these controllers, later we will working with Endpoints, since they are directly related to Services.\n  Kubernetes yaml files   deploy-nginx-1.9.1-scale.yaml  (0 ko)   deploy-nginx-1.9.1.yaml  (0 ko)   deploy-nginx.yaml  (0 ko)   replicaset.yaml  (0 ko)    Deployment Controller - Responsible for the controlled deployment of pods and ReplicaSets.\nReplicaSets - is the newest version of the Replication Controller. The only difference between a ReplicaSet and a Replication Controller right now is the selector support.\nReplicaSets Create the replicaset\nkubectl apply -f replicaset.yaml  Get the status of the replicaset\nkubectl get replicaset  Retrieve detailed information about the replicaset\nkubectl describe replicaset frontend  See the status of pods deployed with replicaset\nkubectl get pods -l tier: frontend  Select one of the pods from the ReplicaSet\nkubect port-forward \u0026lt;ONE_POD_FROM_REPLICASET\u0026gt; 8080:80  In another terminal window run\nkubectl logs -f \u0026lt;POD_FROM_REPLICASET\u0026gt;  Go to http://localhost:8080/\nYou should see logs streaming to the console\nScale a ReplicaSet\nkubectl scale --replicas=4 rs/frontend  The replicas will run 4 pods now\nkubectl describe rs/frontend  kubectl get pods -l tier: frontend  Deployment Controller Create the nginx deployment\nkubectl create -f deploy-nginx.yaml  Get deployment information\nkubectl get deployments  Where is the deployment\nkubectl rollout status deployment/nginx-deployment  Update the deployments\nkubectl apply -f deploy-nginx-1.9.1.yaml  Where is the deployment\nkubectl rollout status deployment/nginx-deployment  History of deployment\nkubectl get replicaset  View the pods in the deployment\nkubectl get pods  Get more detailed information about the deployment\nkubectl describe deployment nginx-deployment  Scale the deployment\nkubectl apply -f deploy-nginx-1.9.1-scale.yaml  Cleanup kubectl delete -f replicaset.yaml kubectl delete -f deploy-nginx.yaml  "
},
{
	"uri": "http://example.org/kubernetes/objects/storage/",
	"title": "Storage",
	"tags": [],
	"description": "",
	"content": " Storage #Persistent Volumes\nWhat Why "
},
{
	"uri": "http://example.org/kubernetes/objects/storage/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "   Kubernetes yaml files   mysql-pod.yaml  (0 ko)   mysql-pv.yaml  (0 ko)    Create the persistent and the claim\nkubectl apply -f mysql-pv.yaml  Create a pod that will use it.\nkubectl apply -f mysql-pod.yaml  Clean up kubectl delete -f mysql-pv.yaml kubectl delete -f mysql-pod.yaml  "
},
{
	"uri": "http://example.org/kubernetes/objects/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": " Services What Why "
},
{
	"uri": "http://example.org/kubernetes/objects/services/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "   Kubernetes yaml files   app.yaml  (1 ko)   mysql-all.yaml  (1 ko)   mysql-service.yaml  (0 ko)    Pod Deployment with health checks, PersistentVolume and claim Since we have created the mysql pod several times, here is a yaml file that creates it all.\nCreate a secret for the password between Wordpress and MYSQL kubectl create secret generic mysql-pass --from-literal=password=YOUR_PASSWORD  Verify it is there\nkubectl get secrets  Deploy mysql\nkubectl apply -f mysql-all.yaml  Verify mysql deployed properly\nkubectl get deploy  Services Deploy the service for mysql\nkubectl apply -f mysql-service.yaml  Verify the service has endpoints.\nkubectl get services -o wide  Application Deployment deploy the application that will use mysqld\nkubectl apply -f app.yaml  Verify Service\nkubectl get services wordpress  Clean up kubectl delete -f mysql-all.yaml kubectl delete -f mysql-service.yaml kubectl delete -f app.yaml  "
},
{
	"uri": "http://example.org/kubernetes/objects/healthchecks/",
	"title": "Healthchecks",
	"tags": [],
	"description": "",
	"content": " Healthchecks What Why Exercises Readiness and Liveliness Readiness Readiness checks let the kubelet know that the pod is ready to receive traffic. For example if this check fails the Service or Load balancer does send traffic to that pod.\nLiveliness Liveliness checks inform the kubelet that the pod is running. If this check fails the kubelet will attempt to restart the pod.\n"
},
{
	"uri": "http://example.org/kubernetes/objects/healthchecks/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": " Exercises   Kubernetes yaml files   mysql-config.yaml  (0 ko)   mysql-health.yaml  (1 ko)   mysql-pv.yaml  (0 ko)    If you deleted the PV from the previous exercise please recreate it\nkubectl apply -f mysql-pv.yaml  Mysql conf needed for testing\nkubectl create -f mysql-config.yaml  Start the Mysql deployment\nkubectl apply -f mysql-health.yaml  Get the pod name\nPOD_NAME=$(kubectl get pods -l app=mysql -o=jsonpath='{.items[0].metadata.name}')  Describe pod should display a healthy pod\nkubectl describe pod $POD_NAME  Breaking the readiness probe\nkubectl exec $POD_NAME -c mysql -- mv /usr/bin/mysql /usr/bin/mysql.off  Check to see if the pods is running\nkubectl get pods -l app=mysql  Output if the pod is not running\nNAME READY STATUS RESTARTS AGE mysql-6b98cc4475-xgwkp 0/1 Running 0 6m  Get more details about the pod\nkubectl describe pod $POD_NAME  Output from the error\nReadiness probe failed: OCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused \u0026quot;exec: \\\u0026quot;/usr/bin/mysql\\\u0026quot;: stat /usr/bin/mysql: no such file or directory\u0026quot;: unknown  Fix the readiness probe\nkubectl exec $POD_NAME -c mysql -- mv /usr/bin/mysql.off /usr/bin/mysql  Output now that the pods is running again\nNAME READY STATUS RESTARTS AGE mysql-6b98cc4475-xgwkp 1/1 Running 0 6m  "
},
{
	"uri": "http://example.org/kubernetes/objects/cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Deleting all resources used All in one go\nkubectl delete po,svc,pv,deploy,rs,qouta,namespace,configmaps,secrets,ing,daemonsets --all  Pods and Services\nkubectl delete po,svc --all  PersistentVolume\nkubectl delete pv --all  Deployments\nkubectl delete deploy --all  Replicaset\nkubectl delete rs --all  Resource quotas\nkubectl delete quota --all  Namespace\nkubectl delete namespace \u0026lt;insert-namespace-name-here\u0026gt;  "
},
{
	"uri": "http://example.org/kubernetes/objects/configmaps/",
	"title": "Configmaps",
	"tags": [],
	"description": "",
	"content": " Configmaps "
},
{
	"uri": "http://example.org/kubernetes/objects/daemonsets/",
	"title": "Daemonsets",
	"tags": [],
	"description": "",
	"content": " Daemonsets "
},
{
	"uri": "http://example.org/kubernetes/objects/ingress/",
	"title": "ingress",
	"tags": [],
	"description": "",
	"content": " Ingress "
},
{
	"uri": "http://example.org/kubernetes/objects/secrets/",
	"title": "Secrets",
	"tags": [],
	"description": "",
	"content": " Secrets "
},
{
	"uri": "http://example.org/containers/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": " Container Networking  Docker uses iptables to provide network isolation Explicitly publish a port for connectivity to it Containers do not have a public IPv4 address They are allocated a private address Services running on a container must be exposed port by port Container ports have to be mapped to the host port to avoid conflicts  More information here\n"
},
{
	"uri": "http://example.org/containers/network/dockernetop/",
	"title": "Docker Network options",
	"tags": [],
	"description": "",
	"content": " Docker Networking options    Flag value Description     -p 8080:80 Map TCP port 80 in the container to port 8080 on the Docker host.   -p 192.168.1.100:8080:80 Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.   -p 8080:80/udp Map UDP port 80 in the container to port 8080 on the Docker host.   -p 8080:80/tcp -p 8080:80/udp Map TCP port 80 in the container to TCP port 8080 on the Docker host, and map UDP port 80 in the container to UDP port 8080 on the Docker host.    "
},
{
	"uri": "http://example.org/containers/network/docker0/",
	"title": "Docker0 ",
	"tags": [],
	"description": "",
	"content": " Container Networking  When Docker starts, it creates a virtual interface called docker0 on the host machine docker0 is assigned a random IP address and subnet from the private range defined by RFC 1918 It passes or switches packets between two connected devices just like a physical bridge or switch  Host to container Container to container  Each new container gets one interface that is automatically attached to the docker0 bridge  "
},
{
	"uri": "http://example.org/containers/network/docker0-dig/",
	"title": "Docker0 Diagram",
	"tags": [],
	"description": "",
	"content": " Container Networking "
},
{
	"uri": "http://example.org/containers/storage/",
	"title": "Storage",
	"tags": [],
	"description": "",
	"content": " Storage Layers Volumes Benefits of Volumes Docker Volume command "
},
{
	"uri": "http://example.org/kubernetes/running/",
	"title": "Running",
	"tags": [],
	"description": "",
	"content": " Options for Running Kubernetes "
},
{
	"uri": "http://example.org/containers/storage/layers/",
	"title": "Layers",
	"tags": [],
	"description": "",
	"content": " Layers  An image is a collection of files and some meta data Images are comprised of multiple layers A layer is also just another image Each image contains software you want to run Every image contains a base layer Docker uses a copy on write system Layers are read only  "
},
{
	"uri": "http://example.org/containers/storage/volumes/",
	"title": "Volumes",
	"tags": [],
	"description": "",
	"content": " Volumes A Volume is a designated directory in a container, which is designed to persist data, independent of the container’s life cycle\n Volume changes are excluded when updating an image Persist when a container is deleted Can be mapped to a host folder Can be shared between containers  "
},
{
	"uri": "http://example.org/containers/storage/benefits/",
	"title": "Storage",
	"tags": [],
	"description": "",
	"content": " Benefits of Volumes  De-couple the data that is stored, from the container which created the data Good for sharing data between containers Can setup a data containers which has a volume you mount in other containers Share directories between multiple containers Bypassing the copy on write system to achieve native disk I/O performance Share a host directory with a container Share a single file between the host and container  "
},
{
	"uri": "http://example.org/containers/storage/commands/",
	"title": "Volume CLI",
	"tags": [],
	"description": "",
	"content": " Docker Volume command The docker volume command contains a number of sub commands used to create and manage volumes Commands are\n docker volume create docker volume ls docker volume inspect docker volume rm  "
},
{
	"uri": "http://example.org/kubernetes/extras/",
	"title": "Extras",
	"tags": [],
	"description": "",
	"content": " Extras "
},
{
	"uri": "http://example.org/kubernetes/extras/monitoring/",
	"title": "Monitoring",
	"tags": [],
	"description": "",
	"content": " Monitoring "
},
{
	"uri": "http://example.org/kubernetes/extras/security/",
	"title": "Security",
	"tags": [],
	"description": "",
	"content": " Security Container security primitives SElinux AppArmor Seccomp https://docs.docker.com/engine/security/seccomp/#run-without-the-default-seccomp-profile\nContainer Pipeline  Establish a pipeline to build a standard image Have a versioning policy Allow to only run images based of the standard image Use the same OS as the host Keep the image small Use a private registry Don’t embed secrets into images, use Hashicorp Vault https://www.cisecurity.org/benchmark/docker/ https://github.com/docker/docker-bench-security  K8 Security  RBAC NetworkPolicy TLS Image Scanning Aquasec/Twistlock Integrating with HashiCorp Vault other public cloud secret stores Investigate using a container based OS (CoreOS, Atomic Linux) Harden and tweak Make sure to pass https://github.com/dev-sec/linux-baseline  Vendors to add  Aquasec https://www.aquasec.com/ Twistlock https://www.twistlock.com/ Sysdig Falco https://www.sysdig.org/falco/  "
},
{
	"uri": "http://example.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://example.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]